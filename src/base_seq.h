#ifndef MNW_SEQ_BASE_H_
#define MNW_SEQ_BASE_H_

/* Author: Phil Mansfield (mansfield@uchicago.edu)
 * 
 * seq.h defines the interfaces for a host of sequence types (abbreviated
 * "seq"). A sequence is just another name for an array list/slice/dynamic
 * array/etc., and I'm only using it because these types will be ubiquitous
 * thorughout the project and I'm trying to keep keystrokes down.
 *
 * Most of the types in this file are autogenerated by a a macro. To help the
 * reader, there is a dummy example type, `ExSeq` which is concretely
 * implemented.
 *
 * If you are unfamiliar with how array lists work, I wrote a blog post on it
 * a while ago which you can read here:
 * https://floatingpointastronomy.wordpress.com/2016/10/20/high-performance-lists-iii-array-lists/
 */

#include <stdint.h>

/* Example is a placeholder type which is used as a concrete example of the
 * types generated by the GENERATE_SEQ_INTERFACE macro in this header file. */
typedef double Example;

/* ExSeq is a sequence (a dynamic array) which contains elements of type
 * Example. */
typedef struct ExSeq {
    Example *Data;
    int32_t Len, Cap;
} ExSeq;

/* `ExSeq` creates a new `Example` sequence with length `len`.
 */
ExSeq ExSeq_New(int32_t len);

/* `ExSeq_FromArray` creates an example array from an existing array.
 */
ExSeq ExSeq_FromArray(Example *data, int32_t len);

/* `ExSeq_NewWithCap` creates a new `Example` seqeunce with length `len` and
 * a capsize of `cap`.
 */
ExSeq ExSeq_NewWithCap(int32_t len, int32_t cap);

/* `ExSeq_Deref` removes a reference to an `Example` sequence. Once the
 * sequence has no references left, it is freed.
 */
void ExSeq_Deref(ExSeq s);

/* `ExSeq_Free` frees an `Example` seqeunce regardless of how many living
 * references it has.
 */
void ExSeq_Free(ExSeq s);

/* `ExSeq_Append` appends an element of type `Example` to the tail of a
 * sequence. All pointers attached to data in the sequence and all slices of
 * sequence cannot be assumed to be valid after an append is performed.
 */
ExSeq ExSeq_Append(ExSeq s, Example tail);

/* `ExSeq_Join` joins two `Example` sequences together. All pointers attached
 * to data in s1 and all subslices into s1 cannot be  assumed to be valid after
 * a join is performed.
 */
ExSeq ExSeq_Join(ExSeq s1, ExSeq s2);

/* `ExSeq_Sub` returns a subsquence of an `Example` seqeunce. This subseqeunce
 * is only valid as long as no joins or appends are performed on any
 * subsequences or on the original sequence.
 */
ExSeq ExSeq_Sub(ExSeq s, int32_t start, int32_t end);

/* Autogenerated code below this point (including this comment). */

#define GENERATE_SEQ_HEADER(type, seqType) \
    typedef struct seqType { \
        type *Data; \
        int32_t Len, Cap; \
    } seqType; \
    seqType seqType##_New(int32_t len); \
    seqType seqType##_FromArray(type *data, int32_t len); \
    seqType seqType##_NewWithCap(int32_t len, int32_t cap); \
    void seqType##_Deref(seqType s); \
    void seqType##_Free(seqType s); \
    seqType seqType##_Append(seqType s, type tail); \
    seqType seqType##_Join(seqType s1, seqType s2); \
    seqType seqType##_Sub(seqType s, int32_t start, int32_t end);

#endif /* MNW_BASE_SEQ_H_ */
